"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[167],{684:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>t,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"api-reference/scanForDeviceSpyware","title":"\ud83d\udd75\ufe0f Spyware Indicators Check","description":"The Malloc Security SDK provides a powerful feature to scan for device-level spyware indicators. This helps determine whether a device may be compromised by known spyware like Pegasus NSO or Cytrox.","source":"@site/docs/api-reference/scanForDeviceSpyware.md","sourceDirName":"api-reference","slug":"/api-reference/scanForDeviceSpyware","permalink":"/sdk/api-reference/scanForDeviceSpyware","draft":false,"unlisted":false,"editUrl":"https://github.com/mallocsecurity/sdk/edit/website/docs/api-reference/scanForDeviceSpyware.md","tags":[],"version":"current","frontMatter":{},"sidebar":"mallocSidebar","previous":{"title":"\ud83c\udf10 URL Threat Detection","permalink":"/sdk/api-reference/checkUrl"},"next":{"title":"\ud83d\udcf1 App Scanning","permalink":"/sdk/api-reference/scanApps"}}');var i=s(4848),c=s(8453);const t={},o="\ud83d\udd75\ufe0f Spyware Indicators Check",a={},l=[{value:"Option 1: Asynchronous Usage",id:"option-1-asynchronous-usage",level:2},{value:"Java",id:"java",level:4},{value:"Option 2: Synchronous Usage",id:"option-2-synchronous-usage",level:2},{value:"Java",id:"java-1",level:4},{value:"\ud83d\udce6 Sample JSON Response",id:"-sample-json-response",level:2},{value:"Interpretation",id:"interpretation",level:2},{value:"\u2705 Best Practices",id:"-best-practices",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h4:"h4",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,c.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"\ufe0f-spyware-indicators-check",children:"\ud83d\udd75\ufe0f Spyware Indicators Check"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.strong,{children:"Malloc Security SDK"})," provides a powerful feature to scan for device-level spyware indicators. This helps determine whether a device may be compromised by known spyware like ",(0,i.jsx)(n.strong,{children:"Pegasus NSO"})," or ",(0,i.jsx)(n.strong,{children:"Cytrox"}),"."]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"This operation is available in both synchronous and asynchronous versions (with callbacks)."}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"option-1-asynchronous-usage",children:"Option 1: Asynchronous Usage"}),"\n",(0,i.jsx)(n.h4,{id:"java",children:"Java"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"MallocSDK.scanForDeviceSpywareAsync(new MallocSDK.ScanFinishedCallback() {\n    @Override\n    public void onScanFinished(JSONObject results) {\n        // Use the result\n    }\n});\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"option-2-synchronous-usage",children:"Option 2: Synchronous Usage"}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["Do ",(0,i.jsx)(n.strong,{children:"not"})," call this on the main/UI thread."]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"java-1",children:"Java"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"ExecutorService executor = Executors.newSingleThreadExecutor();\nexecutor.execute(new Runnable() {\n    @Override\n    public void run() {\n        JSONObject results = MallocSDK.scanForDeviceSpywareSync();\n        // Use the result\n    }\n});\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"-sample-json-response",children:"\ud83d\udce6 Sample JSON Response"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "status": "success",\n  "details": {\n    "spywareIndicatorsArray": [\n      {\n        "spyware_name": "Cytrox",\n        "detections": [\n          {\n            "type": "DIRECTORY_CHECK",\n            "description": "/private/var/tmp/hooker"\n          },\n          {\n            "type": "DIRECTORY_CHECK",\n            "description": "/data/local/tmp/wd"\n          }\n        ]\n      },\n      {\n        "spyware_name": "Nso",\n        "detections": [\n          {\n            "type": "FILE_CHECK",\n            "description": "roleaccountd.plist"\n          }\n        ]\n      }\n    ]\n  }\n}\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"interpretation",children:"Interpretation"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"spyware_name"}),": The name of the detected spyware family (e.g., NSO, Cytrox)."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"detections"}),": A list of suspicious indicators including files and directories linked to spyware presence."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"type"}),": Type of detection (",(0,i.jsx)(n.code,{children:"FILE_CHECK"}),", ",(0,i.jsx)(n.code,{children:"DIRECTORY_CHECK"}),", ",(0,i.jsx)(n.code,{children:"SERVICE_CHECK"}),")."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"description"}),": A human-readable path or artifact associated with the spyware."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"status"})," field in the returned JSON indicates the result of the operation. Possible values include:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"success"})," \u2013 The operation completed successfully and the result contains valid data."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"failed_sdk_not_initialized"})," \u2013 The SDK was not initialized before the function was called. Ensure MallocSDK has been initialised."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"failed_access_forbidden"})," \u2013 The operation was blocked, possibly due to missing permissions or restricted access."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"failed_no_internet_connection"})," \u2013 The device has no active internet connection, which is required to perform the scan."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"error"})," \u2013 A general error occurred during the operation (e.g., unexpected exception or parsing failure)."]}),"\n"]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["These status strings are defined as final constants in the ",(0,i.jsx)(n.a,{href:"/sdk/api-reference/mallocSdkResponseJson",children:"MallocSdkResponseJson"})," class."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"-best-practices",children:"\u2705 Best Practices"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Run this scan after SDK initialization."}),"\n",(0,i.jsx)(n.li,{children:"Use the asynchronous version to avoid blocking the UI."}),"\n",(0,i.jsx)(n.li,{children:"Always check the status field before relying on other content within the JSON."}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>o});var r=s(6540);const i={},c=r.createContext(i);function t(e){const n=r.useContext(c);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),r.createElement(c.Provider,{value:n},e.children)}}}]);