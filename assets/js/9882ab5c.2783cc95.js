"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[111],{8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>r});var i=s(6540);const t={},l=i.createContext(t);function a(e){const n=i.useContext(l);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),i.createElement(l.Provider,{value:n},e.children)}},8457:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"api-reference/scanDownloadedFiles","title":"\ud83d\udcc2 File Scanning","description":"The Malloc Security SDK provides a file scanning feature that inspects APK files located in the device\u2019s Downloads folder. It identifies potentially malicious files by sending the package\'s signature to the Malloc backend threat intelligence service.","source":"@site/docs/api-reference/scanDownloadedFiles.md","sourceDirName":"api-reference","slug":"/api-reference/scanDownloadedFiles","permalink":"/sdk/api-reference/scanDownloadedFiles","draft":false,"unlisted":false,"editUrl":"https://github.com/mallocsecurity/sdk/edit/website/docs/api-reference/scanDownloadedFiles.md","tags":[],"version":"current","frontMatter":{},"sidebar":"mallocSidebar","previous":{"title":"\ud83d\udcf1 App Scanning","permalink":"/sdk/api-reference/scanApps"},"next":{"title":"Troubleshooting","permalink":"/sdk/troubleshooting"}}');var t=s(4848),l=s(8453);const a={},r="\ud83d\udcc2 File Scanning",c={},o=[{value:"Permissions Required",id:"permissions-required",level:3},{value:"Asynchronous Usage (With Progress Updates)",id:"asynchronous-usage-with-progress-updates",level:2},{value:"Synchronous Usage",id:"synchronous-usage",level:2},{value:"\ud83d\udce6 Sample JSON Response",id:"-sample-json-response",level:2},{value:"Interpretation",id:"interpretation",level:2},{value:"\u2705 Best Practices",id:"-best-practices",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"-file-scanning",children:"\ud83d\udcc2 File Scanning"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.strong,{children:"Malloc Security SDK"})," provides a file scanning feature that inspects APK files located in the device\u2019s ",(0,t.jsx)(n.strong,{children:"Downloads folder"}),". It identifies potentially malicious files by sending the package's signature to the Malloc backend threat intelligence service."]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"\u26a0\ufe0f\u26a0\ufe0f This function will be updated with an extended knowledge source in version 0.2.X"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"permissions-required",children:"Permissions Required"}),"\n",(0,t.jsxs)(n.p,{children:["Before scanning files, the appropriate permission must be granted based on the Android version. The method ",(0,t.jsx)(n.a,{href:"/sdk/api-reference/mallocSDK#permissions-required",children:"requestFilesScannerPermission()"})," can be used to request the appropriate permissions."]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["This operation is available in both ",(0,t.jsx)(n.strong,{children:"asynchronous"})," and ",(0,t.jsx)(n.strong,{children:"synchronous"})," versions."]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"asynchronous-usage-with-progress-updates",children:"Asynchronous Usage (With Progress Updates)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"MallocSDK.scanDownloadedFilesAsync(new MallocSDK.FilesScanningUpdatesCallback() {\n    @Override\n    public void onFilesListGenerated(List<FileToScan> files_to_scan) {\n        // The files_to_scan list contains a list of the FileToScan of the apps to be scanned\n    }\n\n    @Override\n    public void onScanningFileUpdate(String file_name, String file_path) {\n        // The file_name is the file name of the file that is currenlty in scan\n        // The file_path is the path of the file that is currenlty in scan\n    }\n\n    @Override\n    public void onScanProgressUpdate(String file_name, String file_path, int total_files_scanned, int total_files_to_scan) {\n        // The file_name is the file name of the file that is currenlty in scan\n        // The file_path is the path of the file that is currenlty in scan\n        // The total_files_scanned is the total number of the scanned files\n        // The total_files_to_scan is the total number of files to scan\n    }\n\n    @Override\n    public void onScanFinished(JSONObject result) {\n        // Use the result\n    }\n});\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.strong,{children:"FileToScan"})," Class represents a file that is queued for scanning and it contains the display name of the file and the Uri reference pointing to the file's location on the device. See more in ",(0,t.jsx)(n.a,{href:"/sdk/api-reference/fileToScan",children:"FilesToScan"}),"."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"synchronous-usage",children:"Synchronous Usage"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["Do ",(0,t.jsx)(n.strong,{children:"not"})," call this on the main/UI thread."]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"executor.execute(new Runnable() {\n    @Override\n    public void run() {\n        JSONObject scanDownloadedFilesResultsJson = MallocSDK.scanDownloadedFilesSync();\n        // Use the scanDownloadedFilesResultsJson\n    }\n});\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"-sample-json-response",children:"\ud83d\udce6 Sample JSON Response"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "status": "success",\n  "details": {\n    "downloadsScanResultsArray": [\n      {\n        "sha256": "b18af2a0e44d7634bbcdf93664d9c78a2695e050393fcfbb5e8b91f902d194a4",\n        "file_name": "insecurebankv2.apk",\n        "apk_name": "InsecureBankv2",\n        "platform": "SI",\n        "is_malicious": true,\n        "image_url": "https://sdk.mallocsecurity.com/image-proxy/b3/64/b3645cf9986be0f8c9d400daab34e29dda877e971a131cee5c97be64c2c7947c",\n        "tags": "malicious,reflection,clipboard,trojan,undetected,obfuscated",\n        "detected_by": "[{\\"antivirus\\": \\"Ikarus\\", \\"details\\": \\"Trojan-Spy.AndroidOS.Agent\\"}]",\n        "scan_time": "2025-05-08T08:16:23"\n      }\n    ]\n  }\n}\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"interpretation",children:"Interpretation"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"downloadsScanResultsArray"}),": An array with the scanned files."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"sha256"}),": The SHA-256 hash of the APK file."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"file_name"}),": The name of the file scanned."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"apk_name"}),": Human-readable name if resolvable."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"platform"}),": The platform or vendor the app is associated with."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"is_malicious"}),": Boolean flag indicating if the APK is flagged as malicious."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"image_url"}),": Optional image link representing the APK."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"tags"}),": Descriptive tags like ",(0,t.jsx)(n.code,{children:"obfuscated"}),", ",(0,t.jsx)(n.code,{children:"reflection"}),", ",(0,t.jsx)(n.code,{children:"contains-elf"}),", etc."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"detected_by"}),": List of antivirus engines and detection info."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"scan_time"}),": Time of scan, if available."]}),"\n"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:'If any of the fields above do not have a corresponding value for a scanned APK, the value will be an empty string "" in the result JSON.'}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"status"})," field in the returned JSON indicates the result of the operation. Possible values include:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"success"})," \u2013 The operation completed successfully and the result contains valid data."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"failed_sdk_not_initialized"})," \u2013 The SDK was not initialized before the function was called. Ensure MallocSDK has been initialised."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"failed_access_forbidden"})," \u2013 The operation was blocked, possibly due to missing permissions or restricted access."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"failed_no_internet_connection"})," \u2013 The device has no active internet connection, which is required to perform the scan."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"error"})," \u2013 A general error occurred during the operation (e.g., unexpected exception or parsing failure)."]}),"\n"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["These status strings are defined as final constants in the ",(0,t.jsx)(n.a,{href:"/sdk/api-reference/mallocSdkResponseJson",children:"MallocSdkResponseJson"})," class."]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"-best-practices",children:"\u2705 Best Practices"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Always initiate scanning ",(0,t.jsx)(n.strong,{children:"after SDK initialization"})," is complete."]}),"\n",(0,t.jsx)(n.li,{children:"Use the asynchronous method for better UI responsiveness."}),"\n",(0,t.jsxs)(n.li,{children:["Consider warning users or restricting APK installation if ",(0,t.jsx)(n.code,{children:"is_malicious"})," is ",(0,t.jsx)(n.code,{children:"true"}),"."]}),"\n",(0,t.jsx)(n.li,{children:"Always check the status field before relying on other content within the JSON."}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);