"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[111],{8453:(e,n,s)=>{s.d(n,{R:()=>c,x:()=>t});var i=s(6540);const a={},l=i.createContext(a);function c(e){const n=i.useContext(l);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:c(e.components),i.createElement(l.Provider,{value:n},e.children)}},8457:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>r,contentTitle:()=>t,default:()=>h,frontMatter:()=>c,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"api-reference/scanDownloadedFiles","title":"\ud83d\udcc2 File Scanning","description":"The Malloc Security SDK provides a file scanning feature that inspects files located on the device.","source":"@site/docs/api-reference/scanDownloadedFiles.md","sourceDirName":"api-reference","slug":"/api-reference/scanDownloadedFiles","permalink":"/sdk/api-reference/scanDownloadedFiles","draft":false,"unlisted":false,"editUrl":"https://github.com/mallocsecurity/sdk/edit/website/docs/api-reference/scanDownloadedFiles.md","tags":[],"version":"current","frontMatter":{},"sidebar":"mallocSidebar","previous":{"title":"\ud83d\udcf1 App Scanning","permalink":"/sdk/api-reference/scanApps"},"next":{"title":"Troubleshooting","permalink":"/sdk/troubleshooting"}}');var a=s(4848),l=s(8453);const c={},t="\ud83d\udcc2 File Scanning",r={},o=[{value:"\ud83d\udccb Permissions Required",id:"-permissions-required",level:2},{value:"Asynchronous",id:"asynchronous",level:2},{value:"Synchronous",id:"synchronous",level:2},{value:"\ud83d\udce6 Sample JSON Response for <code>scanFilesAsync</code> / <code>scanFilesSync</code>",id:"-sample-json-response-for-scanfilesasync--scanfilessync",level:2},{value:"Asynchronous",id:"asynchronous-1",level:2},{value:"Synchronous",id:"synchronous-1",level:2},{value:"\ud83d\udce6 Sample JSON Response for <code>scanDownloadedFilesAsync</code> / <code>scanDownloadedFilesSync</code>",id:"-sample-json-response-for-scandownloadedfilesasync--scandownloadedfilessync",level:2},{value:"\ud83d\udcdd Interpretation",id:"-interpretation",level:2},{value:"\u2705 Best Practices",id:"-best-practices",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",br:"br",code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"-file-scanning",children:"\ud83d\udcc2 File Scanning"})}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.strong,{children:"Malloc Security SDK"})," provides a file scanning feature that inspects files located on the device.",(0,a.jsx)(n.br,{}),"\n","It identifies potentially malicious files by sending the file signatures to the Malloc backend threat intelligence service."]}),"\n",(0,a.jsxs)(n.p,{children:["Starting from ",(0,a.jsx)(n.strong,{children:"v0.2.5"}),", you can scan ",(0,a.jsx)(n.strong,{children:"any files"})," by providing their full paths using the new methods:",(0,a.jsx)(n.br,{}),"\n","\u2705 ",(0,a.jsx)(n.code,{children:"scanFilesAsync"})," (asynchronous, with progress updates)",(0,a.jsx)(n.br,{}),"\n","\u2705 ",(0,a.jsx)(n.code,{children:"scanFilesSync"})," (synchronous)",(0,a.jsx)(n.br,{}),"\n","Prior to v0.2.5, scanning only supported the ",(0,a.jsx)(n.strong,{children:"Downloads folder"}),"."]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"-permissions-required",children:"\ud83d\udccb Permissions Required"}),"\n",(0,a.jsxs)(n.p,{children:["Before scanning files, the appropriate permission must be granted based on the Android version.",(0,a.jsx)(n.br,{}),"\n","The method ",(0,a.jsx)(n.a,{href:"/sdk/api-reference/mallocSDK#permissions-required",children:"requestFilesScannerPermission()"})," can be used to request the appropriate permissions."]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h1,{id:"-scan-specific-file-paths-v025",children:"\ud83d\udd0d Scan Specific File Paths (v0.2.5+)"}),"\n",(0,a.jsx)(n.p,{children:"Use when you want to scan arbitrary files by specifying their full paths."}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsxs)(n.p,{children:["This operation is available in both ",(0,a.jsx)(n.strong,{children:"asynchronous"})," and ",(0,a.jsx)(n.strong,{children:"synchronous"})," versions."]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"asynchronous",children:"Asynchronous"}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsx)(n.p,{children:"Preferred for better UI responsiveness."}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'List<String> file_paths_to_scan = List.of(\n    "/storage/emulated/0/Download/Tasker.6.3.0-beta.apk",\n    "/storage/emulated/0/DCIM/Camera/PXL_20250721_110106038.jpg"\n);\n\nMallocSDK.scanFilesAsync(file_paths_to_scan, new MallocSDK.FilesScanningUpdatesCallback() {\n    @Override\n    public void onFilesListGenerated(List<FileToScan> files_to_scan) {\n        // The files_to_scan list contains a list of the FileToScan of the apps to be scanned\n    }\n\n    @Override\n    public void onScanningFileUpdate(String file_name, String file_path) {\n        // The file_name is the file name of the file that is currenlty in scan\n        // The file_path is the path of the file that is currenlty in scan\n    }\n\n    @Override\n    public void onScanProgressUpdate(String file_name, String file_path, int total_files_scanned, int total_files_to_scan) {\n        // The file_name is the file name of the file that is currenlty in scan\n        // The file_path is the path of the file that is currenlty in scan\n        // The total_files_scanned is the total number of the scanned files\n        // The total_files_to_scan is the total number of files to scan\n    }\n\n    @Override\n    public void onScanFinished(JSONObject result) {\n        // Use the result\n    }\n});\n'})}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.strong,{children:"FileToScan"})," Class represents a file that is queued for scanning and it contains the display name of the file and the Uri reference pointing to the file's location on the device. See more in ",(0,a.jsx)(n.a,{href:"/sdk/api-reference/fileToScan",children:"FilesToScan"}),"."]}),"\n",(0,a.jsx)(n.h2,{id:"synchronous",children:"Synchronous"}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsxs)(n.p,{children:["Do ",(0,a.jsx)(n.strong,{children:"not"})," call this on the main/UI thread."]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'executor.execute(new Runnable() {\n    @Override\n    public void run() {\n        List<String> file_paths_to_scan = List.of(\n            "/storage/emulated/0/Download/insecurebankv2__1_.apk",\n            "/storage/emulated/0/DCIM/Camera/PXL_20250721_110106038.jpg"\n        );\n        JSONObject result = MallocSDK.scanFilesSync(file_paths_to_scan);\n        // Use the result\n    }\n});\n'})}),"\n",(0,a.jsxs)(n.h2,{id:"-sample-json-response-for-scanfilesasync--scanfilessync",children:["\ud83d\udce6 Sample JSON Response for ",(0,a.jsx)(n.code,{children:"scanFilesAsync"})," / ",(0,a.jsx)(n.code,{children:"scanFilesSync"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n  "status": "success",\n  "details": {\n    "filesScanResultsArray": [\n       {\n            "sha256": "b18af2a0e44d7634bbcdf93664d9c78a2695e050393fcfbb5e8b91f902d194a4",\n            "file_name": "insecurebankv2__1_.apk",\n            "file_path": "/storage/emulated/0/Download/insecurebankv2__1_.apk",\n            "apk_name": "InsecureBankv2.apk",\n            "platform": "Android",\n            "is_malicious": true,\n            "image_url": "",\n            "tags": "apk, signed",\n            "detected_by": "[{antivirus: InQuest, details: UNKNOWN}]",\n            "scan_time": "2025-05-21T16:57:38",\n            "timestamp_u": 1753110792\n        },\n        {\n            "sha256": "ff93b2707c47133bb35f6a3a10771e5af653e7b1db3f6cefad8a42d6b0d4a625",\n            "file_name": "PXL_20250721_110106038.jpg",\n            "file_path": "/storage/emulated/0/DCIM/Camera/PXL_20250721_110106038.jpg",\n            "apk_name": "",\n            "platform": "",\n            "is_malicious": false,\n            "image_url": "",\n            "tags": "error",\n            "detected_by": " ",\n            "scan_time": "2025-05-21T16:57:38",\n            "timestamp_u": 1753110792\n        }\n    ]\n  }\n}\n'})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h1,{id:"-scan-downloads-folder",children:"\ud83d\udcc2 Scan Downloads Folder"}),"\n",(0,a.jsxs)(n.p,{children:["Use when you want to scan only the ",(0,a.jsx)(n.strong,{children:"Downloads folder"}),"."]}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsxs)(n.p,{children:["This operation is available in both ",(0,a.jsx)(n.strong,{children:"asynchronous"})," and ",(0,a.jsx)(n.strong,{children:"synchronous"})," versions."]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"asynchronous-1",children:"Asynchronous"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"MallocSDK.scanDownloadedFilesAsync(new MallocSDK.FilesScanningUpdatesCallback() {\n    @Override\n    public void onFilesListGenerated(List<FileToScan> files_to_scan) {\n        // The files_to_scan list contains a list of the FileToScan objects of the files to be scanned\n    }\n\n    @Override\n    public void onScanningFileUpdate(String file_name, String file_path) {\n        // The file_name is the file name of the file that is currenlty in scan\n        // The file_path is the path of the file that is currenlty in scan\n    }\n\n    @Override\n    public void onScanProgressUpdate(String file_name, String file_path, int total_files_scanned, int total_files_to_scan) {\n        // The file_name is the file name of the file that is currenlty in scan\n        // The file_path is the path of the file that is currenlty in scan\n        // The total_files_scanned is the total number of the scanned files\n        // The total_files_to_scan is the total number of files to scan\n    }\n\n    @Override\n    public void onScanFinished(JSONObject result) {\n        // Use the result\n    }\n});\n"})}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.strong,{children:"FileToScan"})," Class represents a file that is queued for scanning and it contains the display name of the file and the Uri reference pointing to the file's location on the device. See more in ",(0,a.jsx)(n.a,{href:"/sdk/api-reference/fileToScan",children:"FilesToScan"}),"."]}),"\n",(0,a.jsx)(n.h2,{id:"synchronous-1",children:"Synchronous"}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsxs)(n.p,{children:["Do ",(0,a.jsx)(n.strong,{children:"not"})," call this on the main/UI thread."]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"executor.execute(new Runnable() {\n    @Override\n    public void run() {\n        JSONObject result = MallocSDK.scanDownloadedFilesSync();\n        // Use the result\n    }\n});\n"})}),"\n",(0,a.jsxs)(n.h2,{id:"-sample-json-response-for-scandownloadedfilesasync--scandownloadedfilessync",children:["\ud83d\udce6 Sample JSON Response for ",(0,a.jsx)(n.code,{children:"scanDownloadedFilesAsync"})," / ",(0,a.jsx)(n.code,{children:"scanDownloadedFilesSync"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n  "status": "success",\n  "details": {\n    "downloadsScanResultsArray": [\n        {\n            "sha256": "b18af2a0e44d7634bbcdf93664d9c78a2695e050393fcfbb5e8b91f902d194a4",\n            "file_name": "insecurebankv2__1_.apk",\n            "file_path": "/storage/emulated/0/Download/insecurebankv2__1_.apk",\n            "apk_name": "InsecureBankv2.apk",\n            "platform": "Android",\n            "is_malicious": true,\n            "image_url": "",\n            "tags": "apk, signed",\n            "detected_by": "[{antivirus: InQuest, details: UNKNOWN}]",\n            "scan_time": "2025-05-21T16:57:38",\n            "timestamp_u": 1753110792\n        }\n    ]\n  }\n}\n'})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"-interpretation",children:"\ud83d\udcdd Interpretation"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"filesScanResultsArray"})," \u2014 for ",(0,a.jsx)(n.code,{children:"scanFilesAsync"})," / ",(0,a.jsx)(n.code,{children:"scanFilesSync"})]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"downloadsScanResultsArray"})," \u2014 for ",(0,a.jsx)(n.code,{children:"scanDownloadedFilesAsync"})," / ",(0,a.jsx)(n.code,{children:"scanDownloadedFilesSync"})]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"sha256"}),": SHA-256 hash of the file."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"file_name"}),": Name of the scanned file."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"file_path"}),": Full path of the scanned file (only in file path scan)."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"apk_name"}),": Human-readable name if resolvable."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"platform"}),": Platform/vendor if applicable."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"is_malicious"}),": Whether the file is flagged as malicious."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"image_url"}),": Optional image link representing the file or APK."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"tags"}),": Descriptive tags (e.g., ",(0,a.jsx)(n.code,{children:"obfuscated"}),", ",(0,a.jsx)(n.code,{children:"reflection"}),", etc.)."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"detected_by"}),": List of antivirus engines and detection info."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"scan_time"}),": Time of scan, if available."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"timestamp_u"}),": Unix timestamp."]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"status"})," field in the returned JSON indicates the result of the operation. Possible values include:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"success"})," \u2013 The operation completed successfully and the result contains valid data."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"failed_sdk_not_initialized"})," \u2013 The SDK was not initialized before the function was called. Ensure MallocSDK has been initialised."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"failed_access_forbidden"})," \u2013 The operation was blocked, possibly due to missing permissions or restricted access."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"failed_no_internet_connection"})," \u2013 The device has no active internet connection, which is required to perform the scan."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"error"})," \u2013 A general error occurred during the operation (e.g., unexpected exception or parsing failure)."]}),"\n"]}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsxs)(n.p,{children:["These status strings are defined as final constants in the ",(0,a.jsx)(n.a,{href:"/sdk/api-reference/mallocSdkResponseJson",children:"MallocSdkResponseJson"})," class."]}),"\n"]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"-best-practices",children:"\u2705 Best Practices"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Always initiate scanning ",(0,a.jsx)(n.strong,{children:"after SDK initialization"})," is complete."]}),"\n",(0,a.jsx)(n.li,{children:"Use the asynchronous method for better UI responsiveness."}),"\n",(0,a.jsxs)(n.li,{children:["Consider warning users or restricting APK installation if ",(0,a.jsx)(n.code,{children:"is_malicious"})," is ",(0,a.jsx)(n.code,{children:"true"}),"."]}),"\n",(0,a.jsx)(n.li,{children:"Always check the status field before relying on other content within the JSON."}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}}}]);