"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[735],{1073:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>t,default:()=>h,frontMatter:()=>c,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"api-reference/rootCheck","title":"\ud83e\ude93 Root Check","description":"The Malloc Security SDK offers a comprehensive root detection feature that checks for common indicators of a rooted device. This includes known rooting binaries, packages, superuser access, and modified security properties.","source":"@site/docs/api-reference/rootCheck.md","sourceDirName":"api-reference","slug":"/api-reference/rootCheck","permalink":"/sdk/api-reference/rootCheck","draft":false,"unlisted":false,"editUrl":"https://github.com/mallocsecurity/sdk/edit/website/docs/api-reference/rootCheck.md","tags":[],"version":"current","frontMatter":{},"sidebar":"mallocSidebar","previous":{"title":"\ud83e\udde9 Initialization","permalink":"/sdk/api-reference/authentication"},"next":{"title":"\ud83c\udf10 URL Threat Detection","permalink":"/sdk/api-reference/checkUrl"}}');var r=s(4848),o=s(8453);const c={},t="\ud83e\ude93 Root Check",a={},l=[{value:"Option 1: Asynchronous Usage",id:"option-1-asynchronous-usage",level:2},{value:"Java",id:"java",level:4},{value:"Option 2: Synchronous Usage",id:"option-2-synchronous-usage",level:2},{value:"Java",id:"java-1",level:4},{value:"\ud83d\udce6 Sample JSON Response",id:"-sample-json-response",level:2},{value:"Interpretation",id:"interpretation",level:2},{value:"\u2705 Best Practices",id:"-best-practices",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h4:"h4",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"-root-check",children:"\ud83e\ude93 Root Check"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.strong,{children:"Malloc Security SDK"})," offers a comprehensive root detection feature that checks for common indicators of a rooted device. This includes known rooting binaries, packages, superuser access, and modified security properties."]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Available from version ",(0,r.jsx)(n.strong,{children:"0.2.0+"})]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"option-1-asynchronous-usage",children:"Option 1: Asynchronous Usage"}),"\n",(0,r.jsx)(n.h4,{id:"java",children:"Java"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"MallocSDK.rootCheckAsync(new MallocSDK.ScanFinishedCallback() {\n    @Override\n    public void onScanFinished(JSONObject rootCheckResults) {\n        // Use the rootCheckResults\n    }\n});\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"option-2-synchronous-usage",children:"Option 2: Synchronous Usage"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Do ",(0,r.jsx)(n.strong,{children:"not"})," call this on the main/UI thread."]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"java-1",children:"Java"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"ExecutorService executor = Executors.newSingleThreadExecutor();\nexecutor.execute(new Runnable() {\n    @Override\n    public void run() {\n        JSONObject rootCheckResults = MallocSDK.rootCheckSync();\n        // Use the rootCheckResults\n    }\n});\nexecutor.shutdown();\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"-sample-json-response",children:"\ud83d\udce6 Sample JSON Response"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n    "status": "success",\n    "details": {\n        "rooted_flag": true,\n        "root_check_results": [\n            {\n                "issue_found": false,\n                "check_description": "Root Management Apps"\n            },\n            {\n                "issue_found": false,\n                "check_description": "Potentially Dangerous Apps"\n            },\n            {\n                "issue_found": false,\n                "check_description": "Root Cloaking Apps"\n            },\n            {\n                "issue_found": false,\n                "check_description": "Test Keys"\n            },\n            {\n                "issue_found": false,\n                "check_description": "BusyBox Binary"\n            },\n            {\n                "issue_found": false,\n                "check_description": "SU Binary"\n            },\n            {\n                "issue_found": false,\n                "check_description": "2nd SU Binary check"\n            },\n            {\n                "issue_found": false,\n                "check_description": "RW Paths"\n            },\n            {\n                "issue_found": true,\n                "check_description": "Dangerous Props"\n            },\n            {\n                "issue_found": false,\n                "check_description": "Root via native check"\n            },\n            {\n                "issue_found": false,\n                "check_description": "Magisk specific checks"\n            }\n        ]\n    }\n}\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"interpretation",children:"Interpretation"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"rooted_flag"}),": A high-level boolean flag indicating if the device appears to be rooted."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"root_check_results"}),": A list of all individual root checks performed, with their respective results and descriptions."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"issue_found"}),": A boolean indicating whether the check flagged something (true = suspicious, false = clean)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"check_description"}),": A short, readable explanation of what that check was about. Possible values:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Root Management Apps"}),": Checks against known root management applications."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Potentially Dangerous Apps"}),": Detects apps that typically require root privileges."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Root Cloaking Apps"}),": Identifies root-hiding apps and checks native library read access."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Test Keys"}),": Verifies kernel signing status (Release-Keys vs Test-Keys)."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"BusyBox Binary"}),": Scans common system locations for BusyBox."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"SU Binary"}),": Checks common paths for Superuser binary."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"2nd SU Binary Check"}),": Alternative check for Superuser binary."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"RW Paths"}),": Verifies write permissions on protected system directories."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Dangerous Props"}),": Examines system properties for known risky configurations."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Root via Native Check"}),": Performs low-level root detection through native library checks."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Magisk Specific Checks"}),": Looks for Magisk framework components in common locations."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"status"})," field in the returned JSON indicates the result of the operation. Possible values include:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"success"})," \u2013 The operation completed successfully and the result contains valid data."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"failed_sdk_not_initialized"})," \u2013 The SDK was not initialized before the function was called. Ensure MallocSDK has been initialised."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"failed_access_forbidden"})," \u2013 The operation was blocked, possibly due to missing permissions or restricted access."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"failed_no_internet_connection"})," \u2013 The device has no active internet connection, which is required to perform the scan."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"error"})," \u2013 A general error occurred during the operation (e.g., unexpected exception or parsing failure)."]}),"\n"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["These status strings are defined as final constants in the ",(0,r.jsx)(n.a,{href:"/sdk/api-reference/mallocSdkResponseJson",children:"MallocSdkResponseJson"})," class."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"-best-practices",children:"\u2705 Best Practices"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Always perform root checks ",(0,r.jsx)(n.strong,{children:"after SDK initialization"})," is completed."]}),"\n",(0,r.jsxs)(n.li,{children:["Use the ",(0,r.jsx)(n.strong,{children:"asynchronous"})," version for better UI performance."]}),"\n",(0,r.jsx)(n.li,{children:"Always check the status field before relying on other content within the JSON."}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>c,x:()=>t});var i=s(6540);const r={},o=i.createContext(r);function c(e){const n=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);