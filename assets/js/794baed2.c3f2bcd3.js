"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[573],{751:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>r,contentTitle:()=>s,default:()=>h,frontMatter:()=>c,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"api-reference/authentication","title":"\ud83e\udde9 Initialization","description":"To start using the Malloc SDK features, you will need to initialize the SDK in your application\'s Application class using the API key that was provided to you.","source":"@site/docs/api-reference/authentication.md","sourceDirName":"api-reference","slug":"/api-reference/authentication","permalink":"/sdk/api-reference/authentication","draft":false,"unlisted":false,"editUrl":"https://github.com/mallocsecurity/sdk/edit/website/docs/api-reference/authentication.md","tags":[],"version":"current","frontMatter":{},"sidebar":"mallocSidebar","previous":{"title":"MallocSDK Class Reference","permalink":"/sdk/api-reference/mallocSDK"},"next":{"title":"\ud83e\ude93 Root Check","permalink":"/sdk/api-reference/rootCheck"}}');var o=n(4848),a=n(8453);const c={},s="\ud83e\udde9 Initialization",r={},l=[{value:"\ud83d\udd27 Initialization Setup",id:"-initialization-setup",level:2},{value:"Option 1: Asynchronous Initialization",id:"option-1-asynchronous-initialization",level:3},{value:"Java",id:"java",level:4},{value:"Kotlin",id:"kotlin",level:4},{value:"Option 2: Synchronous Initialization",id:"option-2-synchronous-initialization",level:3},{value:"Java",id:"java-1",level:4},{value:"Kotlin",id:"kotlin-1",level:4},{value:"Why use ExecutorService?",id:"why-use-executorservice",level:4},{value:"Which one should I use?",id:"which-one-should-i-use",level:3},{value:"\u2705 Tip: Avoid hardcoding your API key in production builds. Consider securing it using remote configuration or encrypted storage.",id:"-tip-avoid-hardcoding-your-api-key-in-production-builds-consider-securing-it-using-remote-configuration-or-encrypted-storage",level:4}];function d(e){const i={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(i.header,{children:(0,o.jsx)(i.h1,{id:"-initialization",children:"\ud83e\udde9 Initialization"})}),"\n",(0,o.jsxs)(i.p,{children:["To start using the Malloc SDK features, you will need to initialize the SDK in your application's Application class using the API key that was provided to you.\nTo initialise the SDK you will need the ",(0,o.jsx)(i.code,{children:"key"})," that was given to you upon suspicion. If you don't have the key please contact us at ",(0,o.jsx)(i.a,{href:"mailto:support@mallocprivacy.com",children:"support@mallocprivacy.com"})]}),"\n",(0,o.jsx)(i.h2,{id:"-initialization-setup",children:"\ud83d\udd27 Initialization Setup"}),"\n",(0,o.jsxs)(i.p,{children:["To begin using ",(0,o.jsx)(i.code,{children:"MallocSDK"}),", you must initialize it once in your ",(0,o.jsx)(i.code,{children:"Application"})," class. This setup connects the SDK with your API key and prepares it for future security and privacy operations."]}),"\n",(0,o.jsxs)(i.p,{children:["In your ",(0,o.jsx)(i.code,{children:"Application"})," class (",(0,o.jsx)(i.code,{children:"MyApplication.java"})," or ",(0,o.jsx)(i.code,{children:"MyApplication.kt"}),"), add the SDK initialization in the ",(0,o.jsx)(i.code,{children:"onCreate()"})," method as shown below:"]}),"\n",(0,o.jsx)(i.hr,{}),"\n",(0,o.jsx)(i.h3,{id:"option-1-asynchronous-initialization",children:"Option 1: Asynchronous Initialization"}),"\n",(0,o.jsxs)(i.p,{children:["Use ",(0,o.jsx)(i.code,{children:"MallocSDK.initializeAsync()"})," to initialize the SDK in a background thread and receive a callback when the process completes. This is the recommended method, especially when API key verification is important before continuing execution."]}),"\n",(0,o.jsx)(i.h4,{id:"java",children:"Java"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-java",children:'import android.app.Application;\nimport com.mallocprivacy.mallocsecuritysdk.MallocSDK;\nimport com.mallocprivacy.mallocsecuritysdk.InitializationFinished;\n\npublic class MyApplication extends Application {\n    @Override\n    public void onCreate() {\n        super.onCreate();\n\n        String key = "your-secret-api-key"; // Replace with your actual API key\n        MallocSDK.initializeAsync(getApplicationContext(), key, new InitializationFinished() {\n            @Override\n            public void onInitializationFinished(Boolean success) {\n                if (success) {\n                    // SDK is ready\n                } else {\n                    // Handle invalid API key\n                }\n            }\n        });\n    }\n}\n'})}),"\n",(0,o.jsx)(i.h4,{id:"kotlin",children:"Kotlin"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-kotlin",children:'import android.app.Application\nimport com.mallocprivacy.mallocsecuritysdk.MallocSDK\nimport com.mallocprivacy.mallocsecuritysdk.InitializationFinished\n\nclass MyApplication : Application() {\n    override fun onCreate() {\n        super.onCreate()\n\n        val key = "your-secret-api-key"\n        MallocSDK.initializeAsync(applicationContext, key, object : InitializationFinished {\n            override fun onInitializationFinished(success: Boolean) {\n                if (success) {\n                    // SDK is ready\n                } else {\n                    // Handle invalid API key\n                }\n            }\n        })\n    }\n}\n'})}),"\n",(0,o.jsx)(i.hr,{}),"\n",(0,o.jsx)(i.h3,{id:"option-2-synchronous-initialization",children:"Option 2: Synchronous Initialization"}),"\n",(0,o.jsxs)(i.p,{children:["Use ",(0,o.jsx)(i.code,{children:"MallocSDK.initializeSync()"})," if you need a simple and immediate boolean response to indicate whether initialization succeeded. Please mind that method blocks the thread, so ",(0,o.jsx)(i.strong,{children:"do not call it on the main/UI thread"})," and use an executor as shown below."]}),"\n",(0,o.jsx)(i.h4,{id:"java-1",children:"Java"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-java",children:'ExecutorService executorService = Executors.newSingleThreadExecutor();\nexecutorService.execute(() -> {\n    boolean success = MallocSDK.initializeSync(getApplicationContext(), "your-secret-api-key");\n    if (success) {\n        // SDK is ready\n    } else {\n        // Handle invalid API key\n    }\n});\nexecutorService.shutdown();\n'})}),"\n",(0,o.jsx)(i.h4,{id:"kotlin-1",children:"Kotlin"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-kotlin",children:'val executorService = Executors.newSingleThreadExecutor()\nexecutorService.execute {\n    val success = MallocSDK.initializeSync(applicationContext, "your-secret-api-key")\n    if (success) {\n        // SDK is ready\n    } else {\n        // Handle invalid API key\n    }\n}\nexecutorService.shutdown()\n'})}),"\n",(0,o.jsx)(i.h4,{id:"why-use-executorservice",children:"Why use ExecutorService?"}),"\n",(0,o.jsx)(i.p,{children:"SDK initialization is performed off the main thread to avoid blocking the UI during app startup. This pattern ensures smooth launch performance without impacting user experience."}),"\n",(0,o.jsx)(i.hr,{}),"\n",(0,o.jsx)(i.h3,{id:"which-one-should-i-use",children:"Which one should I use?"}),"\n",(0,o.jsxs)(i.table,{children:[(0,o.jsx)(i.thead,{children:(0,o.jsxs)(i.tr,{children:[(0,o.jsx)(i.th,{children:"Method"}),(0,o.jsx)(i.th,{children:"Thread-safe"}),(0,o.jsx)(i.th,{children:"Returns success?"}),(0,o.jsx)(i.th,{children:"Recommended for"})]})}),(0,o.jsxs)(i.tbody,{children:[(0,o.jsxs)(i.tr,{children:[(0,o.jsx)(i.td,{children:(0,o.jsx)(i.code,{children:"initializeAsync()"})}),(0,o.jsx)(i.td,{children:"\u2705 Yes"}),(0,o.jsx)(i.td,{children:"\u2705 via callback"}),(0,o.jsx)(i.td,{children:"Production apps (non-blocking)"})]}),(0,o.jsxs)(i.tr,{children:[(0,o.jsx)(i.td,{children:(0,o.jsx)(i.code,{children:"initializeSync()"})}),(0,o.jsx)(i.td,{children:"\u2757 Not for main thread"}),(0,o.jsx)(i.td,{children:"\u2705 Immediately"}),(0,o.jsx)(i.td,{children:"background services"})]})]})]}),"\n",(0,o.jsx)(i.h4,{id:"-tip-avoid-hardcoding-your-api-key-in-production-builds-consider-securing-it-using-remote-configuration-or-encrypted-storage",children:"\u2705 Tip: Avoid hardcoding your API key in production builds. Consider securing it using remote configuration or encrypted storage."})]})}function h(e={}){const{wrapper:i}={...(0,a.R)(),...e.components};return i?(0,o.jsx)(i,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,i,n)=>{n.d(i,{R:()=>c,x:()=>s});var t=n(6540);const o={},a=t.createContext(o);function c(e){const i=t.useContext(a);return t.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function s(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:c(e.components),t.createElement(a.Provider,{value:i},e.children)}}}]);